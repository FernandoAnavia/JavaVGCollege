/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newpackage.pk;

import java.awt.Color;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author feran
 */
public class ManageUsers extends javax.swing.JFrame {

    /**
     * Creates new form ManageUsers
     */
    public ManageUsers() {
        initComponents();
        fillCombos();

            degreeField.setVisible(false);
            degreeTitle.setVisible(false);

    }
    
    private void fillCombos(){
        try {
            String sqlDegree ="SELECT DegreeId from vgccollege.degree";
            String sqlBranch ="SELECT BranchId from vgccollege.branch";
            
            Connection conn = MySQLConnection.getConnection();
            PreparedStatement pstD = conn.prepareStatement(sqlDegree);
            ResultSet rsD = pstD.executeQuery();
            
            PreparedStatement pstB = conn.prepareStatement(sqlBranch);
            ResultSet rsB = pstB.executeQuery();
            
            while (rsD.next()){
                String degreeCombo = rsD.getString("DegreeId");
                degreeField.addItem(degreeCombo);               
            }
            
            while (rsB.next()){
                String branchCombo = rsB.getString("BranchId");
                branchField.addItem(branchCombo);               
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        userTypeCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        userIdField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lastNameField = new javax.swing.JTextField();
        emailField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        degreeTitle = new javax.swing.JLabel();
        updateBtn = new javax.swing.JButton();
        createBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableBD = new javax.swing.JTable();
        exitBtn = new javax.swing.JButton();
        addressField = new javax.swing.JTextField();
        dobField = new javax.swing.JTextField();
        cNumberField = new javax.swing.JTextField();
        passwordField = new javax.swing.JTextField();
        branchField = new javax.swing.JComboBox();
        degreeField = new javax.swing.JComboBox();
        showUsersBtn = new javax.swing.JButton();
        findBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("jLabel2");

        jTextField2.setText("jTextField1");

        jButton3.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("User Type");

        userTypeCombo.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        userTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AdminMember", "Lecturer", "Student" }));
        userTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTypeComboActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("User ID");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("First Name");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Last Name");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Email");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("C. Number");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Address");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("DOB");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Branch");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Password");

        degreeTitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        degreeTitle.setText("Degree");

        updateBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        createBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        createBtn.setText("Create");
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        tableBD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableBD);

        exitBtn.setBackground(new java.awt.Color(255, 102, 102));
        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        dobField.setForeground(new java.awt.Color(153, 153, 153));
        dobField.setText("YYYY-MM-DD");
        dobField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dobFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dobFieldFocusLost(evt);
            }
        });

        showUsersBtn.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        showUsersBtn.setText("Show Users");
        showUsersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showUsersBtnActionPerformed(evt);
            }
        });

        findBtn.setText("Find");
        findBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findBtnActionPerformed(evt);
            }
        });

        clearBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(userTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(showUsersBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(userIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(findBtn))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel8)
                            .addComponent(degreeTitle))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(emailField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(cNumberField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(dobField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(addressField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(passwordField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(branchField, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(degreeField, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(createBtn)
                .addGap(51, 51, 51)
                .addComponent(updateBtn)
                .addGap(50, 50, 50)
                .addComponent(deleteBtn)
                .addGap(42, 42, 42)
                .addComponent(clearBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(userTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showUsersBtn))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(userIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(findBtn))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(dobField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(branchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(degreeTitle)
                            .addComponent(degreeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)
                        .addGap(12, 12, 12)))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createBtn)
                    .addComponent(updateBtn)
                    .addComponent(deleteBtn)
                    .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearBtn))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitBtnActionPerformed

    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        // TODO add your handling code here:
            
            String userTypeStr = userTypeCombo.getSelectedItem().toString();
            String userIDStr = userIdField.getText();
            String firstNameStr = firstNameField.getText();
            String lastNameStr = lastNameField.getText();
            String emailStr = emailField.getText();
            String cNumberStr = cNumberField.getText();
            String addressStr = addressField.getText();
            String dobStr = dobField.getText();
            String branchStr = branchField.getSelectedItem().toString();
            String passwordStr = passwordField.getText();
            String degreeStr = degreeField.getSelectedItem().toString();
            

            try (Connection conn = MySQLConnection.getConnection()){
                
              if(userTypeStr == "Student"){
                  
       
                
                String mySQLQuery = 
                    "INSERT INTO vgccollege." + userTypeStr + "(StudentId, firstName, lastName, contactNumber, email, address, DOB, BranchId, loginPassword, DegreeId)" 
                        + "VALUES (?,?,?,?,?,?,?,?,?,?)";
                        

            PreparedStatement pst = conn.prepareStatement(mySQLQuery);
           
            pst.setString(1, userIDStr);
            pst.setString(2, firstNameStr);
            pst.setString(3, lastNameStr);           
            pst.setString(4, cNumberStr);
            pst.setString(5, emailStr);
            pst.setString(6, addressStr);
            pst.setString(7, dobStr);
            pst.setString(8, branchStr);
            pst.setString(9, passwordStr);
            pst.setString(10, degreeStr);                
            pst.executeUpdate();
            
 
            JOptionPane.showMessageDialog(null, "New user created successfully");
              
              } else {
                  
                  if(userTypeStr == "Lecturer"){
                  
                                  String mySQLQuery = 
                    "INSERT INTO vgccollege." + userTypeStr + "(LecturerId, firstName, lastName, contactNumber, email, address, DOB, BranchId, loginPassword)" 
                        + "VALUES (?,?,?,?,?,?,?,?,?)";
                        

            PreparedStatement pst = conn.prepareStatement(mySQLQuery);
           
            pst.setString(1, userIDStr);
            pst.setString(2, firstNameStr);
            pst.setString(3, lastNameStr);           
            pst.setString(4, cNumberStr);
            pst.setString(5, emailStr);
            pst.setString(6, addressStr);
            pst.setString(7, dobStr);
            pst.setString(8, branchStr);
            pst.setString(9, passwordStr);               
            pst.executeUpdate();
            
 
            JOptionPane.showMessageDialog(null, "New user created successfully");
                  
              }else{
                  
                                                    String mySQLQuery = 
                    "INSERT INTO vgccollege." + userTypeStr + "(AdminId, firstName, lastName, contactNumber, email, address, DOB, BranchId, loginPassword)" 
                        + "VALUES (?,?,?,?,?,?,?,?,?)";
                        

            PreparedStatement pst = conn.prepareStatement(mySQLQuery);
           
            pst.setString(1, userIDStr);
            pst.setString(2, firstNameStr);
            pst.setString(3, lastNameStr);
            pst.setString(4, cNumberStr);
            pst.setString(5, emailStr);
            pst.setString(6, addressStr);
            pst.setString(7, dobStr);
            pst.setString(8, branchStr);
            pst.setString(9, passwordStr);               
            pst.executeUpdate();
            
 
            JOptionPane.showMessageDialog(null, "New user created successfully");
                  
              }
                  
              }
                
            }catch (Exception exception) {
                            
                
            JOptionPane.showMessageDialog(null, exception);
            exception.printStackTrace();
            
            
        }
            
         
        
    }//GEN-LAST:event_createBtnActionPerformed

    private void userTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTypeComboActionPerformed
        // TODO add your handling code here:
        String userTypeStr = userTypeCombo.getSelectedItem().toString();
        
        if (userTypeStr == "Student"){
            degreeField.setVisible(true);
            degreeTitle.setVisible(true);
        } else {
            degreeField.setVisible(false);
            degreeTitle.setVisible(false);
        }
    }//GEN-LAST:event_userTypeComboActionPerformed

    private void dobFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dobFieldFocusGained
        // TODO add your handling code here:
        if(dobField.getText().equals("YYYY-MM-DD"))
        {
            dobField.setText("");
            dobField.setForeground(new Color(153, 153, 153));
        } else {
            dobField.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_dobFieldFocusGained

    private void dobFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dobFieldFocusLost
        // TODO add your handling code here:
         if(dobField.getText().equals(""))
        {
            dobField.setText("YYYY-MM-DD");
            dobField.setForeground(new Color(153, 153, 153));
        } else {
            dobField.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_dobFieldFocusLost

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        String userTypeStr = userTypeCombo.getSelectedItem().toString();
        
        int confirmation = JOptionPane.showConfirmDialog(null, "Are your sure you want to delete the user?","Warning", JOptionPane.YES_NO_OPTION);
        
        if (confirmation == 0)
            
        {
            
        
        try (Connection conn = MySQLConnection.getConnection()){

            if(userTypeStr == "AdminMember"){
                
                            String sqlDel = 
                    "DELETE FROM vgccollege." + userTypeStr + " WHERE AdminId =?";
            
            PreparedStatement pst = conn.prepareStatement(sqlDel);
            pst.setString(1, userIdField.getText());
            int i = pst.executeUpdate();
            pst.executeUpdate();

            
                if(i>0){
                    JOptionPane.showMessageDialog(null, "User deleted successfully");
                } else {
                    JOptionPane.showMessageDialog(null, "User not found");
                }
                
               
            } else {
                if (userTypeStr == "Lecturer"){
                    
                                String sqlDel = 
                    "DELETE FROM vgccollege." + userTypeStr + " WHERE LecturerId =?";
            
            PreparedStatement pst = conn.prepareStatement(sqlDel);
            pst.setString(1, userIdField.getText());
            int i = pst.executeUpdate();
            pst.executeUpdate();

            
                if(i>0){
                    JOptionPane.showMessageDialog(null, "User deleted successfully");
                } else {
                    JOptionPane.showMessageDialog(null, "User not found");
                }

            
                   
                } else {
                                String sqlDel = 
                    "DELETE FROM vgccollege." + userTypeStr + " WHERE StudentId =?";
            
            PreparedStatement pst = conn.prepareStatement(sqlDel);
            pst.setString(1, userIdField.getText());
            int i = pst.executeUpdate();
            pst.executeUpdate();

                if(i>0){
                    JOptionPane.showMessageDialog(null, "User deleted successfully");
                } else {
                    JOptionPane.showMessageDialog(null, "User not found");
                }
            
           
                }
                
            }
            
            
            
        }catch(Exception exception) {
                                           
            JOptionPane.showMessageDialog(null, exception);
            exception.printStackTrace();
        } 
        } else {
            
            JOptionPane.showMessageDialog(null, "The user wasn't deleted");
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        
            String userTypeStr = userTypeCombo.getSelectedItem().toString();
            String userIDStr = userIdField.getText();
            String firstNameStr = firstNameField.getText();
            String lastNameStr = lastNameField.getText();
            String emailStr = emailField.getText();
            String cNumberStr = cNumberField.getText();
            String addressStr = addressField.getText();
            String dobStr = dobField.getText();
            String branchStr = branchField.getSelectedItem().toString();
            String passwordStr = passwordField.getText();
            String degreeStr = degreeField.getSelectedItem().toString();
        
        try (Connection conn = MySQLConnection.getConnection()){
                
              if(userTypeStr == "Student"){
                  
       
                
                String mySQLQuery = 
                    "UPDATE vgccollege." + userTypeStr + " SET firstName=?, lastName=?, contactNumber=?, email=?, address=?, DOB=?, BranchId=?, loginPassword=?, DegreeId=? WHERE StudentId=?";                        

            PreparedStatement pst = conn.prepareStatement(mySQLQuery);
            pst.setString(10, userTypeStr);
           
            pst.setString(10, userIDStr);
            pst.setString(1, firstNameStr);
            pst.setString(2, lastNameStr);
            pst.setString(3, cNumberStr);
            pst.setString(4, emailStr);
            pst.setString(5, addressStr);
            pst.setString(6, dobStr);
            pst.setString(7, branchStr);
            pst.setString(8, passwordStr);
            pst.setString(9, degreeStr);  
            int i = pst.executeUpdate();
            pst.executeUpdate();
            
            
                if(i>0){
                    JOptionPane.showMessageDialog(null, "User updated successful");
                } else {
                    JOptionPane.showMessageDialog(null, "Update could not be made");
                }
              
              } else {
                  
                  if(userTypeStr == "Lecturer"){
                  
                 String mySQLQuery = 
                    "UPDATE vgccollege." + userTypeStr + " SET firstName=?, lastName=?, contactNumber=?, email=?, address=?, DOB=?, BranchId=?, loginPassword=? WHERE LecturerId=?";                        

            PreparedStatement pst = conn.prepareStatement(mySQLQuery);
            pst.setString(9, userTypeStr);
           
            pst.setString(9, userIDStr);
            pst.setString(1, firstNameStr);
            pst.setString(2, lastNameStr);
            pst.setString(3, cNumberStr);
            pst.setString(4, emailStr);
            pst.setString(5, addressStr);
            pst.setString(6, dobStr);
            pst.setString(7, branchStr);
            pst.setString(8, passwordStr);
            int i = pst.executeUpdate();
            pst.executeUpdate();
            
            
                if(i>0){
                    JOptionPane.showMessageDialog(null, "User updated successful");
                } else {
                    JOptionPane.showMessageDialog(null, "Update could not be made");
                }
                
              }else{
                  

                String mySQLQuery = 
                    "UPDATE vgccollege." + userTypeStr + " SET firstName=?, lastName=?, contactNumber=?, email=?, address=?, DOB=?, BranchId=?, loginPassword=? WHERE AdminId=?";                        

            PreparedStatement pst = conn.prepareStatement(mySQLQuery);
            pst.setString(9, userTypeStr);
           
            pst.setString(9, userIDStr);
            pst.setString(1, firstNameStr);
            pst.setString(2, lastNameStr);
            pst.setString(3, cNumberStr);
            pst.setString(4, emailStr);
            pst.setString(5, addressStr);
            pst.setString(6, dobStr);
            pst.setString(7, branchStr);
            pst.setString(8, passwordStr);
            int i = pst.executeUpdate();
            pst.executeUpdate();
            
            
                if(i>0){
                    JOptionPane.showMessageDialog(null, "User updated successful");
                } else {
                    JOptionPane.showMessageDialog(null, "Update could not be made");
                }
                  
              }
                  
              }
                
            }catch (Exception exception) {
                            
                
            JOptionPane.showMessageDialog(null, exception);
            exception.printStackTrace();
            
            
        }
        

    }//GEN-LAST:event_updateBtnActionPerformed

    private void showUsersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showUsersBtnActionPerformed
        // TODO add your handling code here:
        
        String userTypeStr = userTypeCombo.getSelectedItem().toString();
        
        try (Connection conn = MySQLConnection.getConnection()){
                
                String sql = "SELECT * FROM vgccollege." + userTypeStr;
                PreparedStatement pst = conn.prepareStatement(sql);
                ResultSet rs = pst.executeQuery();
                tableBD.setModel(DbUtils.resultSetToTableModel(rs));
                
            }catch (Exception exception) {
                                         
            JOptionPane.showMessageDialog(null, exception);
            exception.printStackTrace();
        
    }//GEN-LAST:event_showUsersBtnActionPerformed
    }
        
    private void findBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findBtnActionPerformed
        // TODO add your handling code here:
        
        String userTypeStr = userTypeCombo.getSelectedItem().toString();
        String userIDStr = userIdField.getText();
        
            try (Connection conn = MySQLConnection.getConnection()){
                
                
                if (userTypeStr == "Student"){
                    
                                    String sql = "SELECT * FROM vgccollege." + userTypeStr + " WHERE StudentId = '" + userIDStr + "'";
                PreparedStatement pst = conn.prepareStatement(sql);
                pst.executeQuery();
                ResultSet rs = pst.executeQuery();
                
                if(rs.next()){
                    firstNameField.setText(rs.getString("firstName"));
                    lastNameField.setText(rs.getString("lastName"));
                    cNumberField.setText(rs.getString("contactNumber"));
                    emailField.setText(rs.getString("email"));
                    addressField.setText(rs.getString("address"));
                    dobField.setText(rs.getString("DOB"));
                    dobField.setForeground(new Color(0, 0, 0));
                    branchField.setSelectedItem(rs.getString("BranchId"));
                    passwordField.setText(rs.getString("loginPassword"));
                    degreeField.setSelectedItem(rs.getString("DegreeId"));
                } else {
                    JOptionPane.showMessageDialog(null, "User wasn't found");
                }
                    
                } else {
                    if (userTypeStr == "Lecturer"){
                        
                                        String sql = "SELECT * FROM vgccollege." + userTypeStr + " WHERE LecturerId = '" + userIDStr + "'";
                PreparedStatement pst = conn.prepareStatement(sql);
                pst.executeQuery();
                ResultSet rs = pst.executeQuery();
                
                if(rs.next()){
                    firstNameField.setText(rs.getString("firstName"));
                    lastNameField.setText(rs.getString("lastName"));
                    cNumberField.setText(rs.getString("contactNumber"));
                    emailField.setText(rs.getString("email"));
                    addressField.setText(rs.getString("address"));
                    dobField.setText(rs.getString("DOB"));
                    dobField.setForeground(new Color(0, 0, 0));
                    branchField.setSelectedItem(rs.getString("BranchId"));
                    passwordField.setText(rs.getString("loginPassword"));
                    
                } else {
                    JOptionPane.showMessageDialog(null, "User wasn't found");
                }
                        
                    } else {
                        
                                        String sql = "SELECT * FROM vgccollege." + userTypeStr + " WHERE AdminId = '" + userIDStr + "'";
                PreparedStatement pst = conn.prepareStatement(sql);
                pst.executeQuery();
                ResultSet rs = pst.executeQuery();
                
                if(rs.next()){
                    firstNameField.setText(rs.getString("firstName"));
                    lastNameField.setText(rs.getString("lastName"));
                    cNumberField.setText(rs.getString("contactNumber"));
                    emailField.setText(rs.getString("email"));
                    addressField.setText(rs.getString("address"));
                    dobField.setText(rs.getString("DOB"));
                    dobField.setForeground(new Color(0, 0, 0));
                    branchField.setSelectedItem(rs.getString("BranchId"));
                    passwordField.setText(rs.getString("loginPassword"));
                    
                } else {
                    JOptionPane.showMessageDialog(null, "User wasn't found");
                }
                        
                    }
                 
                }
                

                
            }catch (Exception exception) {
                                         
            JOptionPane.showMessageDialog(null, exception);
            exception.printStackTrace();
        
    }
        
        
    }//GEN-LAST:event_findBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
        userIdField.setText("");
        firstNameField.setText("");
        lastNameField.setText("");
        cNumberField.setText("");
        emailField.setText("");
        addressField.setText("");
        passwordField.setText("");
        dobField.setText("YYYY-MM-DD");
        dobField.setForeground(new Color(153, 153, 153));
        
        
        
        
    }//GEN-LAST:event_clearBtnActionPerformed

        
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageUsers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressField;
    public javax.swing.JComboBox branchField;
    private javax.swing.JTextField cNumberField;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton createBtn;
    public javax.swing.JComboBox degreeField;
    private javax.swing.JLabel degreeTitle;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField dobField;
    private javax.swing.JTextField emailField;
    private javax.swing.JButton exitBtn;
    private javax.swing.JButton findBtn;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JTextField passwordField;
    private javax.swing.JButton showUsersBtn;
    private javax.swing.JTable tableBD;
    private javax.swing.JButton updateBtn;
    public javax.swing.JTextField userIdField;
    private javax.swing.JComboBox userTypeCombo;
    // End of variables declaration//GEN-END:variables
}
