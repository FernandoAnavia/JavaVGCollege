/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newpackage.pk;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author feran
 */
public class AssignmentExam extends javax.swing.JFrame {

    /**
     * Creates new form AttendanceDashboard
     */
    public AssignmentExam() {
        initComponents();      
        concatValues();
        fillComboGroups();
        gradeNumberValidation();
        
        StdetailsField.setText("");
    }
    
    private void fillComboGroups(){
        
        String LecturerId = LoginSesion.UID;
        
        try {
           String sqlLId = "SELECT concatValue FROM vgccollege.LecturerCourse WHERE LecturerId = ?";

            
            Connection conn = MySQLConnection.getConnection();
                      
            PreparedStatement pst = conn.prepareStatement(sqlLId);
            pst.setString(1, LecturerId);
            ResultSet rs = pst.executeQuery();
            
            
            while (rs.next()){

                
                String concatVL = rs.getString("concatValue");               
                groupsCombo.addItem(concatVL);               
            }

            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
                private void fillComboClasses () {
                
        
        try {
       
            Connection conn = MySQLConnection.getConnection();

         String sqlDays = "DESCRIBE vgccollege.Grades" + LoginSesion.currentGroup;
            PreparedStatement pstDays = conn.prepareStatement(sqlDays);
            ResultSet rsDays = pstDays.executeQuery();

            
            int c = 0;
            

            while (rsDays.next()){
            
                c = c+1;

                if (c>6){

                String DaysSt = rsDays.getString("Field");                
                ClassCombo.addItem(DaysSt);
                }
             
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
                
            }

    
    private void concatValues(){
        
        try {
           String ConcVS = "UPDATE vgccollege.StudentCourse SET concatValue = concat(CourseId,SemesterId)";
           String ConcVL = "UPDATE vgccollege.LecturerCourse SET concatValue = concat(CourseId,SemesterId)";
            
            Connection conn = MySQLConnection.getConnection();
                      
            PreparedStatement pstS = conn.prepareStatement(ConcVS);
            PreparedStatement pstL = conn.prepareStatement(ConcVL);
            
            pstS.executeUpdate();
            pstL.executeUpdate();
            

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        groupsCombo = new javax.swing.JComboBox();
        exitBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        detailsField = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        StudentsCombo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        ClassCombo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        StdetailsField = new javax.swing.JLabel();
        CReateBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        GradeField = new javax.swing.JTextField();

        jButton2.setText("Assign");

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton3.setText("Assign");

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton5.setText("Update");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel1.setText("Groups");

        groupsCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                groupsComboItemStateChanged(evt);
            }
        });

        exitBtn.setBackground(new java.awt.Color(153, 153, 153));
        exitBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        exitBtn.setForeground(new java.awt.Color(255, 51, 51));
        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel2.setText("Group Details");

        detailsField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel3.setText("Student");

        StudentsCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                StudentsComboItemStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel4.setText("Activity");

        ClassCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ClassComboItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel5.setText("Student Details");

        StdetailsField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        CReateBtn.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        CReateBtn.setText("FirstTime");
        CReateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CReateBtnActionPerformed(evt);
            }
        });

        updateBtn.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton6.setText("Show selected group");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel6.setText("Grade");

        jButton7.setBackground(new java.awt.Color(204, 204, 0));
        jButton7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton7.setText("Create class");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(CReateBtn)
                        .addGap(39, 39, 39)
                        .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ClassCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(StudentsCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(groupsCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(detailsField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(StdetailsField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(GradeField, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(groupsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(StudentsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(44, 44, 44))
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(44, 44, 44)
                                        .addComponent(StdetailsField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ClassCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(detailsField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(GradeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CReateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(13, 13, 13)
                        .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitBtnActionPerformed

    
    private void groupsComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_groupsComboItemStateChanged
        // TODO add your handling code here:
        
                StudentsCombo.removeAllItems();
                ClassCombo.removeAllItems();
                StudentsCombo.setSelectedIndex(-1);
                StdetailsField.setText("");
                String LecturerId = LoginSesion.UID;
                String comboSelec = groupsCombo.getSelectedItem().toString();
                
                try (
                Connection conn = MySQLConnection.getConnection()){
            String sqlLId = "SELECT C.courseName, S.sDescription, D.degreeName, L.CourseId, L.SemesterId  FROM vgccollege.LecturerCourse L, vgccollege.Course C, vgccollege.Semester S, vgccollege.Degree D where L.CourseId = C.CourseId and L.SemesterId = S.SemesterId and D.DegreeId = C.DegreeId and L.LecturerId = ?  and L.concatValue= ? ";
            PreparedStatement pst = conn.prepareStatement(sqlLId);
            pst.setString(1, LecturerId);
            pst.setString(2, comboSelec);
            ResultSet rs = pst.executeQuery();
 
            
            while (rs.next()){
                
                String cNValue = rs.getString("courseName");
                String sDesValue = rs.getString("sDescription");
                String degNameValue = rs.getString("degreeName");
                String fullDesc = cNValue + " " + sDesValue + " " + degNameValue;
                            
                LoginSesion.courseIdSaved = rs.getString("CourseId");
                LoginSesion.semesterIdSaved = rs.getString("SemesterId");
                
                detailsField.setText(fullDesc);
                
                String Gid = rs.getString("CourseId");
                String Semid = rs.getString("SemesterId");
                String newFullDesc = LecturerId + Gid + Semid;
                LoginSesion.currentGroup = newFullDesc;
                
                try {
                    
                    String sqlCreateT = "CREATE TABLE IF NOT EXISTS Grades" + newFullDesc + "(\n" +
                        "LecturerId VARCHAR(5) NOT NULL,\n" +
                        "StudentId VARCHAR(5) NOT NULL,\n" +
                        "CourseId varchar(5) NOT NULL,\n" +
                        "SemesterId varchar(5) NOT NULL,\n" +
                        "Average float (4),\n" +
                        "concatValue varchar(10),\n" +
                        "Activity1 float (4),\n" +
                        "primary key (LecturerId, StudentId, CourseId, SemesterId),\n" +
                        "foreign key (LecturerId) REFERENCES Lecturer(LecturerId),\n" +
                        "foreign key (StudentId) REFERENCES Student(StudentId),\n" +
                        "foreign key (CourseId) REFERENCES Course(CourseId),\n" +
                        "foreign key (SemesterId) REFERENCES Semester(SemesterId)\n" +
                        ")";                
                    PreparedStatement pstCreate = conn.prepareStatement(sqlCreateT);
                    pstCreate.executeUpdate();
                    
                    
                } catch (Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
               
                fillComboStudents();
                fillComboClasses();
            }
                
            }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
                

    }//GEN-LAST:event_groupsComboItemStateChanged

    private void fillComboStudents(){
        
        String LecturerId = LoginSesion.UID;
        String courseConc = groupsCombo.getSelectedItem().toString();
        
        try {
            
            Connection conn = MySQLConnection.getConnection();
            
                String sqlStds = "SELECT S.StudentId, S.firstName, S.lastName FROM vgccollege.Student S WHERE S.StudentId IN (SELECT A.StudentId FROM vgccollege.StudentCourse A LEFT JOIN vgccollege.LecturerCourse B ON A.concatValue = B.concatValue WHERE B.LecturerId = ? and A.ConcatValue = ? )";
                PreparedStatement pstSt = conn.prepareStatement(sqlStds);
                pstSt.setString(1, LecturerId);
                pstSt.setString(2, courseConc);
                ResultSet rsSt = pstSt.executeQuery();
            
            while (rsSt.next()){

                String stfNSt = rsSt.getString("S.firstName");
                String SlNSt = rsSt.getString("S.lastName");
                String fullNameSt = stfNSt + " " + SlNSt;
                
                StdetailsField.setText(fullNameSt);
                
                String concatVSt = rsSt.getString("S.StudentId");                
                StudentsCombo.addItem(concatVSt);             
            }
            

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void StudentsComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_StudentsComboItemStateChanged
        // TODO add your handling code here:
                StdetailsField.setText("");
                String LecturerId = LoginSesion.UID;
                String comboSelecG = groupsCombo.getSelectedItem().toString();
                
                
                if((StudentsCombo.getSelectedIndex()) > -1){
                    
                    String comboSelecS = StudentsCombo.getSelectedItem().toString();
                
                try (
                Connection conn = MySQLConnection.getConnection()){
            String sqlLId = "SELECT StudentId, firstName, lastName FROM vgccollege.Student WHERE StudentId IN (SELECT A.StudentId FROM vgccollege.StudentCourse A LEFT JOIN vgccollege.LecturerCourse B ON A.concatValue = B.concatValue WHERE B.LecturerId = ? and A.ConcatValue = ? and A.StudentId = ?)";
            PreparedStatement pst = conn.prepareStatement(sqlLId);
            pst.setString(1, LecturerId);
            pst.setString(2, comboSelecG);
            pst.setString(3, comboSelecS);
            ResultSet rs = pst.executeQuery();
 
            
            while (rs.next()){
                
                String cNValue = rs.getString("firstName");
                String sDesValue = rs.getString("lastName");
                String fullDesc = cNValue + " " + sDesValue;

                StdetailsField.setText(fullDesc);
               
            }
                
            }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }}
    }//GEN-LAST:event_StudentsComboItemStateChanged

    private void ClassComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ClassComboItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ClassComboItemStateChanged

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        try (Connection conn = MySQLConnection.getConnection()){

            String sql = "SELECT * from Grades" + LoginSesion.currentGroup;
            PreparedStatement pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        }catch (Exception exception) {

            JOptionPane.showMessageDialog(null, exception);
            exception.printStackTrace();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    public void gradeNumberValidation(){
    GradeField.addKeyListener(new KeyAdapter() {
        public void keyPressed(KeyEvent ke){
                  String value = GradeField.getText();
                  int l = value.length();
                  if ((ke.getKeyChar() >= '0' && ke.getKeyChar() <= '9') || ke.getKeyChar() == KeyEvent.VK_BACK_SPACE || ke.getKeyChar() == KeyEvent.VK_PERIOD) {
                   GradeField.setEditable(true);
                  } else {
                      GradeField.setEditable(false);
                      JOptionPane.showMessageDialog(null, "Please enter a number as Grade");
                  }
        }
  
    });  
}
    
    
    private void CReateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CReateBtnActionPerformed
        // TODO add your handling code here:
        String StudentIdCreate = StudentsCombo.getSelectedItem().toString();
        String CourseIdCreate = LoginSesion.courseIdSaved;
        String SemesterIdCreate = LoginSesion.semesterIdSaved;
        String LecturerIdCreate = LoginSesion.UID;
        String column = ClassCombo.getSelectedItem().toString();
        float gradeMarked = Float.parseFloat(GradeField.getText());
        
        
        
        try (Connection conn = MySQLConnection.getConnection()){

            String mySQLQuery =
            "INSERT INTO vgccollege.Grades" + LoginSesion.currentGroup + "(LecturerId, StudentId, CourseId, SemesterId, " + column + " ) "
            + "VALUES (?,?,?,?,?)";

            PreparedStatement pst = conn.prepareStatement(mySQLQuery);

            pst.setString(1, LecturerIdCreate);
            pst.setString(2, StudentIdCreate);
            pst.setString(3, CourseIdCreate);
            pst.setString(4, SemesterIdCreate);
            pst.setFloat(5, gradeMarked);
            pst.executeUpdate();

            JOptionPane.showMessageDialog(null, "Grades updated successfully");

        }catch (Exception exception) {

            JOptionPane.showMessageDialog(null, exception);
            exception.printStackTrace();

        }
        
    }//GEN-LAST:event_CReateBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        
        String StudentIdCreate = StudentsCombo.getSelectedItem().toString();
        String CourseIdCreate = LoginSesion.courseIdSaved;
        String SemesterIdCreate = LoginSesion.semesterIdSaved;
        String LecturerIdCreate = LoginSesion.UID;
        String column = ClassCombo.getSelectedItem().toString();
        float gradeMarked = Float.parseFloat(GradeField.getText());
        
        
        try (Connection conn = MySQLConnection.getConnection()){
                
             
                String mySQLQuery = 
                    "UPDATE vgccollege.Grades" + LoginSesion.currentGroup + " SET " + column + " = ? WHERE LecturerId=? and StudentId=? and CourseId = ? and SemesterId = ?";                        

                
            PreparedStatement pst = conn.prepareStatement(mySQLQuery);
             
            pst.setFloat(1, gradeMarked);
            pst.setString(2, LecturerIdCreate);
            pst.setString(3, StudentIdCreate);
            pst.setString(4, CourseIdCreate);
            pst.setString(5, SemesterIdCreate);           
            pst.executeUpdate();
            
            int i = pst.executeUpdate();
            pst.executeUpdate();
            
            
                if(i>0){
                    JOptionPane.showMessageDialog(null, "Grade updated successful");
                } else {
                    JOptionPane.showMessageDialog(null, "Grade could not be made");
                }
              
              
                
            }catch (Exception exception) {
                            
                
            JOptionPane.showMessageDialog(null, exception);
            exception.printStackTrace();
            
            
        }
        
        try {
       
            Connection conn = MySQLConnection.getConnection();

         String sqlDays = "DESCRIBE vgccollege.Grades" + LoginSesion.currentGroup;
            PreparedStatement pstDays = conn.prepareStatement(sqlDays);
            ResultSet rsDays = pstDays.executeQuery();

            
            int c = 0;
            int d = 0;
            

            while (rsDays.next()){
            
                c = c+1;
                
                if (c == 6){
                    
                String avSum0 = "update vgccollege.Grades" + LoginSesion.currentGroup + " set Average = 0";
                PreparedStatement pstAvSum0 = conn.prepareStatement(avSum0);
                pstAvSum0.executeUpdate();
                
                } else {
                if (c>6){
                    
                d = d+1;

                
                String avSum = "update vgccollege.Grades" + LoginSesion.currentGroup + " set Average = Average + Activity" + d;
                PreparedStatement pstAvSum = conn.prepareStatement(avSum);
                pstAvSum.executeUpdate();
                
                }
                }
               
             
            }
            
                String avFinal = "update vgccollege.Grades" + LoginSesion.currentGroup + " set Average = Average/" + d;
                PreparedStatement pstAvFinal = conn.prepareStatement(avFinal);
                pstAvFinal.executeUpdate();
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_updateBtnActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        
        int comboSize = (ClassCombo.getItemCount())+1;
        
        
        int confirmation = JOptionPane.showConfirmDialog(null, "You are about to create an Activity, this class cannot be deleted in the future. Do you want to proceed?","Warning", JOptionPane.YES_NO_OPTION);
        
        if (confirmation == 0)
            
        {

        try (Connection conn = MySQLConnection.getConnection()){
                
             
                String mySQLQuery = 
                    "ALTER TABLE vgccollege.Grades" + LoginSesion.currentGroup + " ADD COLUMN Activity" + comboSize + " int(1)";                        

                
            PreparedStatement pst = conn.prepareStatement(mySQLQuery);
            pst.executeUpdate();
   
            
                   JOptionPane.showMessageDialog(null, "Activity was created successfully");
    
            }catch (Exception exception) {
                            
                
            JOptionPane.showMessageDialog(null, exception);
            exception.printStackTrace();
             
            
        }} else {
            
            JOptionPane.showMessageDialog(null, "The Activity wasn't created");
        }
        
        ClassCombo.removeAllItems();
        fillComboClasses();

    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AssignmentExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AssignmentExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AssignmentExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AssignmentExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AssignmentExam().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CReateBtn;
    private javax.swing.JComboBox ClassCombo;
    private javax.swing.JTextField GradeField;
    private javax.swing.JLabel StdetailsField;
    private javax.swing.JComboBox StudentsCombo;
    private javax.swing.JLabel detailsField;
    private javax.swing.JButton exitBtn;
    private javax.swing.JComboBox groupsCombo;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
